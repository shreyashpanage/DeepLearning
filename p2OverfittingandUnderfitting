import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Generate synthetic dataset
np.random.seed(42)
X = np.linspace(-3, 3, 100).reshape(-1, 1)
y = 0.5 * X**3 - X**2 + X + np.random.normal(0, 1, size=X.shape)

# Split into training and testing datasets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Function to fit polynomial regression and visualize results
def polynomial_regression_demo(degree):
    # Generate polynomial features
    poly = PolynomialFeatures(degree=degree)
    X_train_poly = poly.fit_transform(X_train)
    X_test_poly = poly.transform(X_test)

    # Train polynomial regression model
    model = LinearRegression()
    model.fit(X_train_poly, y_train)

    # Predict on training and testing datasets
    y_train_pred = model.predict(X_train_poly)
    y_test_pred = model.predict(X_test_poly)

    # Calculate training and testing errors
    train_error = mean_squared_error(y_train, y_train_pred)
    test_error = mean_squared_error(y_test, y_test_pred)

    # Visualize the fit
    X_plot = np.linspace(-3, 3, 100).reshape(-1, 1)
    y_plot = model.predict(poly.transform(X_plot))

    plt.scatter(X_train, y_train, label="Training Data", color="blue")
    plt.scatter(X_test, y_test, label="Testing Data", color="red")
    plt.plot(X_plot, y_plot, label=f"Degree {degree}", color="green")
    plt.title(f"Polynomial Regression (Degree {degree})\nTrain Error: {train_error:.3f}, Test Error: {test_error:.3f}")
    plt.xlabel("X")
    plt.ylabel("y")
    plt.legend()
    plt.show()

    return train_error, test_error

# Experiment with different polynomial degrees
degrees = [1, 3, 5, 10]
errors = []

for degree in degrees:
    print(f"Fitting Polynomial Regression with Degree {degree}")
    train_error, test_error = polynomial_regression_demo(degree)
    errors.append((degree, train_error, test_error))

# Plot training and testing errors
errors = np.array(errors)
plt.plot(errors[:, 0], errors[:, 1], label="Training Error", marker="o")
plt.plot(errors[:, 0], errors[:, 2], label="Testing Error", marker="o")
plt.title("Training vs Testing Error")
plt.xlabel("Polynomial Degree")
plt.ylabel("Mean Squared Error")
plt.legend()
plt.show()
